=============================================================================
List of generated methods in project: psi3441-frdm

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "TPM1"      (component Init_TPM_VAR0)
   - TPM1_Init -This method initializes registers of the TPM module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "TPM2"      (component Init_TPM_VAR0)
   - TPM2_Init -This method initializes registers of the TPM module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "TPM0"      (component Init_TPM_VAR0)
   - TPM0_Init -This method initializes registers of the TPM module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "DA1"       (component DAC_LDD)
   - DA1_Init -Initializes the device according to design-time configuration properties. Allocates memory for the device data 
                structure.   If the <Enable in init. code> is set to "yes" then the device is also enabled (see the description 
                of the Enable method).  This method can be called only once. Before the second call of Init the Deinit method 
                must be called first. If DMA service is enabled this method also initializes inherited DMA Transfer component.
   - DA1_SetValue -Sets DAC output voltage according to specified value.  Input data format is specified by <Data mode> 
                property settings. If selected formatting is not native for DAC device which is used then any necessary 
                transformations (e.g. shifting) are done._/Note: This method is available only if Data buffer is disabled./_

Module "AD1"       (component ADC_LDD)
   - AD1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - AD1_StartLoopTriggeredMeasurement -This method prepares recurring measurement of the selected group of samples and exits 
                immediately. Multiple measurements of the selected sample group are done, but each measurement of the sample 
                group is not started until the trigger comes. Beware of trigger overflow (next trigger comes before the 
                previous measurement is done). This is ADC HW trigger method.   The group of samples for measurement is 
                specified by preceding call to <SelectSampleGroup()> or <CreateSampleGroup> method.     DMA disabled: The 
                <OnMeasurementComplete()> event is invoked after the each measurement is done and the event is enabled. Results 
                of the measurement can be read by the <GetMeasuredValues()> method.     DMA enabled: DMA request from 
                configured ADC is enabled automatically. The <OnMeasurementComplete() > event is invoked after the requested 
                number of results are transferred to destination buffer by DMA and the event is enabled. When DMA transfer is 
                finished, DMA request is automatically disabled by HW, but ADC loop mode is not stopped. In order to start new 
                loop measurement with DMA, DMA must be reconfigured by <SetBuffer()> method. <GetMeasuredValues()> method is 
                not available if DMA mode is enabled.     The state of the measurement can be also polled by the 
                <GetMeasurementCompleteStatus()> method.This method is available only if HW supports triggered measurement and 
                <Trigger> is enabled.
   - AD1_GetMeasuredValues -This method copies results of the last measurement to the user supplied buffer. Data size depends 
                on the size of measured sample group (see <SelectSampleGroup()> or <CreateSampleGroup()> method). Data 
                representation is defined by the <Result type> property. Typically this method is called from 
                <OnMeasurementComplete> event to get results of the last measurement. This method is not available if DMA is 
                enabled.
   - AD1_CreateSampleGroup -This method prepares HW for next measurement according to array of samples defined during run-time. 
                The array of samples should be prepared prior to calling this method. Pointer to the array is passed into this 
                method in parameter SampleGroupPtr. The number of samples is defined by parameter SampleCount. Once any group 
                is prepared, the measurement can be started multiple times. Note: This method works only with the sample groups 
                defined during run-time. For design-time defined groups use <SelectSampleGroup()> method.
   - AD1_StartCalibration -This method starts self calibration process. Calibration is typically used to remove the effects of 
                the gain and offset from a specific reading.
   - AD1_GetCalibrationResultStatus -This method should be used for check the last calibration result. If calibration completed 
                normally the method finish calibration process by writing gain calibration values.

Module "DMA"       (component Init_DMA_VAR0)
   - DMA_Init -This method initializes registers of the DMA module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "PTD"       (component Init_GPIO_VAR0)
   - PTD_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "Cpu"       (component MKL25Z128LK4)

===================================================================================
